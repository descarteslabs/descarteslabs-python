syntax = "proto3";

package descarteslabs.ibis;


// Note that all expr-like types have either an opname (if a true Expr)
// or a type field (datatypes, other non-expr types) which are used to
// determine the type to be deserialized. This is essentially a bit
// of duck-typing so that python can generally not worry about the
// actual google.protocol.Message data type for deserialization.

// ibis.expr.schema.Schema support
// SchemaValue corresponds to the lists of column names and datatypes
message SchemaValue {
    // the two lists need to have same length
    repeated string names = 1;
    repeated SchemaType types = 2;
}

message ArraySchemaValue {
    SchemaType value_type = 1;
}

message DecimalSchemaValue {
    uint32 precision = 1;
    int32 scale = 2;
}

message GeospatialSchemaValue {
    // "geometry" or "geography"
    string geotype = 1;
    uint32 srid = 2;
}

message SchemaType {
    // an ibis.expr.datatype type name
    string type = 1;
    oneof value {
        // nothing here for basic types!
        // type = "Struct"
        SchemaValue struct = 2;
        // type = "Array"
        ArraySchemaValue array = 3;
        // type = "Geography"
        GeospatialSchemaValue geospatial = 4;
        // type = "Decimal"
        DecimalSchemaValue decimal = 5;
    }
}

message Schema {
    // "schema"
    string type = 1;
    SchemaValue value = 2;
}

// ibis.expr.win.Window support
// Representation for a preceding/following 2-tuple containing None or unsigned
message WindowTuple {
    oneof start {
        uint64 start_value = 1;
    }
    oneof end {
        uint64 end_value = 2;
    }
}

// This wraps up the various types allowed for the
// preceding, following, and max_lookback parameters
message WindowParam {
    oneof value {
        // can also be None, i.e. not set
        uint64 offset = 1;
        WindowTuple tuple = 2;
        Expr expr = 3;
        Literal literal = 4;
    }
}

message WindowValue {
    repeated Expr group_by = 1;
    repeated Expr order_by = 2;
    WindowParam preceding = 3;
    WindowParam following = 4;
    WindowParam max_lookback = 5;
    string how = 6;
}

// sort of arbitrary that params are segregated into value subobject
message Window {
    // "window"
    string type = 1;
    WindowValue value = 2;
}

// shapely geometry type as a literal
message Geometry {
    // WKT
    string wkt = 1;
    string crs = 2;
}

// Raw primitive types needed by some exprs
message Primitive {
    oneof value {
        // currently limited to those types we are using in python
        bool bool = 1;
        // -2**63 to 2**63 - 1
        int64 int = 2;
        // 2**63 to 2**64 - 1
        uint64 uint = 3;
        double double = 4;
        string string = 5;
    }
}

message IntList {
    repeated int64 value = 1;
}
message BoolList {
    repeated bool value = 1;
}
message DoubleList {
    repeated double value = 1;
}
message StringList {
    repeated string value = 1;
}
// ibis.expr.operations support
// Literals need some special handling so aren't handled as Exprs
message Literal {
    string opname = 1;
    string dtype = 2;
    oneof value {
        bool bool = 3;
        int64 int = 4;
        // ibis literals do not support uint64
        double double = 5;
        string string = 6;
        Geometry geometry = 7;
        IntList int_list = 8;
        BoolList bool_list = 9;
        DoubleList double_list = 10;
        StringList string_list = 11;
    }
}

message MapValueList {
    repeated MapValue values = 1;
}

// Union of different value types for Expr.value map
message MapValue {
    oneof value {
        MapValueList list = 1;
        Expr expr = 2;
        Literal literal = 3;
        Schema schema = 4;
        Window window = 5;
        Primitive primitive = 6;
    }
}

// Handle most Exprs generically, along with data types
message Expr {
    string opname = 1;
    string type = 2;
    string name = 3;
    int32 alias = 4;
    map<string, MapValue> value = 5;
}

message QueryValue {
    Expr expr = 1;
    repeated Expr table_refs = 2;
}

message Query {
    string type = 1;
    QueryValue value = 2;
}
  
