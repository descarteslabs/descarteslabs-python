syntax = "proto3";

package descarteslabs.vektorius.v1;

import "descarteslabs/common/proto/ibis/ibis.proto";

// A request for the schema of a table.
message SchemaRequest {

  // The name of the table.
  string table_name = 1;
  // The database scope for the name.
  string database = 2;
  // The table owner.
  string owner = 3;
}

// A response that contains a table schema.
message SchemaResponse {

  // The schema for a table, JSON-encoded.
  descarteslabs.ibis.Schema schema = 1;
  string table_name = 2;
}

// A query job.
message Job {

  // The id for the Job.
  string job_id = 1;

  // The status of the Job.
  enum STATUS {
    UNKNOWN = 0;
    PENDING = 1;
    RUNNING = 2;
    DONE = 3;
    CANCELLED = 4;
  }

  STATUS status = 2;
}

// Byte-slice of an Arrow RecordBatch.
message RecordBatchSlice {

  // The byte-slice of the RecordBatch.
  bytes data = 1;

  // Indicates if this is the last slice of a RecordBatch.
  bool final = 2;
}

// StreamingStatus error.
message Error {
  string message = 1;
}

// SearchResponse status.
message SearchStatus {

  // The Job associated with the search.
  // May not be available once streaming has begun.
  Job job = 1;

  // Query results are now available.
  bool results_available = 2;

  // Total number of result rows if results_available.
  uint64 total_rows = 3;

  // (Opaque) Continuation token for beginning/resuming streaming of the results.
  // If empty and results_available, all results have been processed.
  // This value is encrypted and signed to ensure integrity and authorization.
  string continuation_token = 4;
}

// A request that initiates a search.
message SearchRequest {

  // The query that the Job should run. JSON-encoded.
  descarteslabs.ibis.Query query = 1;
}

// A response that contains the status information for the search.
message SearchResponse {

  oneof block {
    // Search status for the search;
    SearchStatus status = 1;

    // Byte-slice of Arrow RecordBatch data.
    RecordBatchSlice slice = 2;
  }
}

// A request to get the status of a search Job.
message SearchStatusRequest {

  // Continuation token for the search.
  string continuation_token = 1;
}

// A response that contains the updated status.
message SearchStatusResponse {

  // The updated status information.
  SearchStatus status = 1;
}

// A request to get a page of a search.
message SearchResultsRequest {

  // Opaque continuation token containing information to resume retrieval.
  string continuation_token = 1;

  // Offset from the continuation_token location.
  uint64 offset = 2;
}

// A response for a SearchResultsRequest, streaming one or more blocks.
// First and last blocks are always status (unless a connection is broken).
message SearchResultsResponse {
  oneof block {

    // Current search status as of this point in the results stream.
    SearchStatus status = 1;

    // Byte-slice of Arrow RecordBatch data.
    RecordBatchSlice slice = 2;
  }
}

message CreateTableRequest {
  // The name of the table.
  string table_name = 1;

  // Table schema for all but the geometry column.
  map<string, string> properties_schema = 2;

  // Geometry type for postgis geometry column
  string geometry_type = 3;

  // SRID for postgis geometry
  int32 srid = 4;

  // Field name of unique key(s)
  repeated string primary_key = 5;
}

message CreateTableResponse {
  // Status, did the table creation succeed?
  bool status = 1;

  // Message explaining the status.
  string message = 2;
}

message DeleteTableRequest {
  // The name of the table.
  string table_name = 1;
}

message DeleteTableResponse {
  // Status, did the table deletion succeed?
  bool status = 1;

  // Message explaining the status.
  string message = 2;
}

message CreateIngestJobRequest {
  // key
  string key = 1;

  // storage_type
  string storage_type = 2;

  // table_name
  string table_name = 3;

  // owner 
  string owner = 4;
}

message CreateIngestJobResponse {
  // yaas job id
  int64 job_id = 1;
}

message JobStatusRequest {
  // yaas job id
  int64 job_id = 1;
}

enum JobStatus {
  REGISTERED = 0;
  PENDING = 1;
  RUNNING = 2;
  CANCELLED = 3;
  SUCCESS = 4;
  FAILURE = 5;
}

message JobStatusResponse {
  // The status of the async job.
  JobStatus status = 1;

  // Message explaining the status.
  string message = 2;
}

// The Vektorius service definition.
service Vektorius {

  // Create a table.
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);

  // Delete a table.
  rpc DeleteTable(DeleteTableRequest) returns (DeleteTableResponse);

  // Initiate an ingest job.
  rpc CreateIngestJob(CreateIngestJobRequest) returns (CreateIngestJobResponse);

  // Get the job status for ingest or delete rows requests.
  rpc GetJobStatus(JobStatusRequest) returns (JobStatusResponse);

  // Get the schema for a table.
  rpc GetSchema(SchemaRequest) returns (SchemaResponse);

  // Initiate a search Job.
  rpc Search(SearchRequest) returns (stream SearchResponse);

  // Get the status of a search Job.
  rpc SearchStatus(SearchStatusRequest) returns (SearchStatusResponse);

  // Get the results of a successful search Job.
  rpc SearchResults(SearchResultsRequest) returns (stream SearchResultsResponse);
}
